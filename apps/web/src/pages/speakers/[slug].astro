---
import placeholder from "../../../public/placeholder.png"
import App from "@/layouts/App.astro";
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const speakers = await getCollection("speakers");
  return speakers.map((speaker) => ({
    params: { slug: speaker.slug },
    props: { speaker },
  }));
}

export interface Props {
  speaker: CollectionEntry<"speakers">;
}

const { speaker } = Astro.props;
const { Content } = await speaker!.render();

const talks = await getCollection(
  "talks",
  (talk) => talk.data.speaker.slug === speaker.slug,
);

const metaFields = [
  "terminal",
  "os",
  "shell",
  "colorscheme",
  "language",
] as const;
---

<App title={speaker!.data.name}>
  <article class="vise my-16">
    <div class="grid grid-cols-1 md:grid-cols-5 gap-8">
      <div class="col-span-2 row-start-2 md:row-start-auto">
        <Image
          alt={`portrait of ${speaker.data.name}`}
          src={speaker.data.image || placeholder}
          transition:name={`speaker-image-${speaker.slug}`}
        />
        <dl
          class="col-span-2 px-4 leading-relaxed text-xs text-slate-400 p-4 bg-slate-950 font-mono overflow-scroll"
        >
          <span class="text-cyan-600">local</span>{" "}
          <span class="text-slate-200">{speaker.slug}</span>{" "}
          <span>=</span>{" "}
          <span class="text-teal-200">{"{"}</span>
          {
            metaFields.map((field) => (
              <div class="flex gap-[1ch] pl-[2ch]">
                <dt class="text-slate-500">
                  <span class="text-blue-300">{field}</span>=
                </dt>
                <dd>
                  {" "}
                  <span class="text-amber-400 whitespace-nowrap">
                    "{speaker.data[field]}"
                  </span>
                </dd>
              </div>
            ))
          }
          <span class="text-teal-200">{"}"}</span>
        </dl>
      </div>

      <div class="col-span-3">
        <h1 class="text-5xl font-bold mb-2 font-mono text-teal-400">
          {speaker!.data.name}
        </h1>

        <p class="mb-4 text-slate-400 italic text-sm">
          {speaker!.data.job}
        </p>

        <div class="max-w-[60ch] overflow-hidden mb-4">
          <div class="prose dark:prose-invert mb-16">
            <Content />
          </div>
          {
            speaker.data.links?.length && (
            <div>
              <ul class="text-teal-500 dark:text-teal-300 text-sm space-y-2">
                {speaker.data.links?.map((link) => {
                  return (
                    <li><a class="text-teal-500 underline dark:text-teal-300" href={link}>{link.replace("https://", "")}</a></li>
                  );
                })}
              </ul>
              </div>
            )
          }

          {
            false &&
              talks.map((talk) => (
                <a
                  href={`/talks/${talk.slug}`}
                  data-hotkey="g f"
                  class="block dark:border dark:p-4 group rounded-sm border-slate-200 dark:border-slate-700 space-y-4 dark:bg-slate-950 hover:bg-slate-200 dark:hover:bg-slate-800 hover:border-slate-600 mt-8"
                >
                  <h2 class="text-2xl text-amber-500 mb-4">
                    Talk:
                    <span
                      class="
                        text-teal-500
                        dark:text-teal-300
                      ">
                      {talk.data.title}
                    </span>
                  </h2>
                  <p>{talk.data.description}</p>
                  <p class="text-teal-400 text-right">gf &rarr;</p>
                </a>
              ))
          }
        </div>
      </div>
    </div>
  </article>
</App>
