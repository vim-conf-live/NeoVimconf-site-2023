---
import { getCollection, type CollectionEntry } from "astro:content";
import App from "@/layouts/App.astro";
import TimeSlot from "@/components/TimeSlot.astro";
import ScheduleItem from "@/components/ScheduleItem.astro";
import { ChevronRightIcon, ChevronDownIcon } from "@heroicons/react/20/solid";
import ScheduleDayLink from "@/components/ScheduleDayLink.astro";

export interface Props {
  for: CollectionEntry<"schedules">
}
const  { for: day } = Astro.props;
const schedules = await getCollection("schedules")


const isActive = (href:string) => href === Astro.url.pathname
---

<App title="Schedule">
  <main class="my-16 vise">
    <h1 class="text-6xl leading-tight font-bold mb-8 text-teal-300">Fix your <em class="text-amber-300 italic">skill issues</em> with these talks!</h1>
    <p class="text-lg leading-relaxed font-sans mb-16 max-w-prose">
      [todo] Don't miss these captivating talks that will unveil the true power of Neovim and equip you with invaluable techniques and knowledge to elevate your editing experience.
      We've gathered some of the finest folks all around the neovim community to talk about something super awesome.
    </p>

    <div class="flex gap-8 mb-">
      {schedules.map(day => {
        const href = `/talks/${day.data.slug}`
        return (
          <a href={href} class={`text-2xl p-4 flex items-center gap-4 justify-between group border-b-2 ${isActive(href) ? `text-teal-400 border-teal-400` : `text-slate-300 hover:text-slate-50 border-transparent`}`}>
            <h2 class="text-center leading-loose w-full">
              <span class="font-bold text-3xl">
                {day.data.title}
              </span>
              <time class="block text-sm text-slate-500" datetime={day.id}>
                {new Intl.DateTimeFormat('en-US', { dateStyle: "medium" }).format(new Date(Date.parse(day.id)))}
              </time>
            </h2>
            {isActive(href) ? 
            <ChevronDownIcon className="h-8 w-8" />
            :
            <ChevronRightIcon className="h-8 w-8" />
            }
          </a>
        );
        })}
    </div>

    <ol class="divide-y divide-slate-700" transition:name={`timetable-${day.id}`} transition:animate="slide">
      {day.data.talks.map((slot) => (
        <li>
        {slot.talk ? (
          <a href={`/talks/${slot.talk.slug}`} class="group block hover:bg-slate-950 px-2 py-4">
            <ScheduleItem on={day} for={slot} />
          </a>
        ) : (
          <div class="text-center py-8">
            <TimeSlot on={day.id} for={slot.time} />
            <h3>{slot.title}</h3>
            <p>{slot.description}</p>
          </div>
        )}
        </li>
      ))}
    </ol>

  </main>
</App>
