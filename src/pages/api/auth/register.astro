---
import RegisterForm from "@/components/RegisterForm.astro";
import App from "@/layouts/App.astro"
import { SignUpSchema, type SignUp } from "@/lib/attendee";
import { supabase } from "@/lib/auth";
export const prerender = true

let errors: any = { email: null };
let formData: SignUp | undefined;

if (Astro.request.method === "POST") {
    formData = Object.fromEntries(await Astro.request.formData()) as SignUp;
    const parsedFormData = SignUpSchema.safeParse(formData);

    if (parsedFormData.success) {
      Astro.cookies.set("nvc-formdata", JSON.stringify(formData), {
        sameSite: "strict",
        path: "/",
        secure: true,
        maxAge: 60 * 60 * 24
      });

      const {data, error} = await supabase.auth.signInWithOtp({ 
        email: parsedFormData.data.email,
        options: {
          emailRedirectTo: import.meta.env.PUBLIC_AUTH_REDIRECT_HOST + "/register/confirm"
        }
      })

      if (error) {
        errors.global = error
      }

      return Astro.redirect("/register/success");
    }

    errors = parsedFormData.error.formErrors.fieldErrors
}

const hasErrors = Object.values(errors).some(Boolean)
---

<App title="Register">
  <article class="vise min-w-max">
    { hasErrors && errors.global 
      ? (<p class="text-red">{errors.global.message}</p>) 
      : (<RegisterForm formData={formData} errors={errors} />)
    }
    
  </article>
</App>
