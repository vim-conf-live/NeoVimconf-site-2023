---
import SpeakerGrid from "@/components/SpeakerGrid.astro";
import placeholder from "../../../public/placeholder.png";
import App from "@/layouts/App.astro";
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const speakers = await getCollection("speakers");
  return speakers.map((speaker) => ({
    params: { slug: speaker.slug },
    props: { speaker },
  }));
}

export interface Props {
  speaker: CollectionEntry<"speakers">;
}

const { speaker } = Astro.props;
const { Content } = await speaker!.render();

const additionalSpeakers = await getCollection(
  "speakers",
  ({ slug, data: { type } }) =>
    (type === "speaker" || !type) && slug !== speaker.slug,
);

const metaFields = [
  "terminal",
  "os",
  "shell",
  "colorscheme",
  "language",
] as const;
---

<App title={speaker!.data.name}>
  <article class="vise my-16">
    <div class="grid grid-cols-1 md:grid-cols-5 gap-4 md:gap-8">
      <div class="md:col-span-2">
        <Image
          alt={`portrait of ${speaker.data.name}`}
          src={speaker.data.image || placeholder}
          transition:name={`speaker-image-${speaker.slug}`}
        />
      </div>

      <div class="md:col-span-3">
        <div class="mb-4">
          <h1 class="text-5xl font-bold mb-2 font-mono text-teal-400">
            {speaker!.data.name}
          </h1>
          {
            !!speaker.data.job && (
              <p class="text-slate-400 italic text-sm">{speaker.data.job}</p>
            )
          }
        </div>

        {
          speaker.data.talk ? (
            <h2 class="text-2xl text-teal-500 dark:text-teal-300 mb-4">
              {speaker.data.talk}
            </h2>
          ) : null
        }

        <div class="max-w-[60ch] overflow-hidden mb-16 space-y-6">
          <div class="prose dark:prose-invert">
            <Content />
          </div>

          {
            speaker.data.links?.length && (
              <div>
                <ul class="space-y-2 list-disc list-inside">
                  {speaker.data.links?.map((link) => (
                    <li>
                      <a
                        class="text-teal-500 underline dark:text-teal-300"
                        href={link}
                      >
                        {link.replace("https://", "")}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )
          }

          <dl
            class="col-span-2
            leading-relaxed
            text-sm
            text-slate-400
            p-4
            bg-slate-950
            font-mono
            overflow-h-auto
            overflow-y-auto
            scrollbar-thin
            scrollbar-thumb-slate-700
            scrollbar-track-slate-600
            scrollbar-thumb-rounded-full
            scrollbar-track-rounded-full"
          >
            <span class="text-cyan-600">local</span>{" "}
            <span class="text-slate-200"
              >{speaker.data.alias || speaker.slug}</span
            >{" "}
            <span>=</span>{" "}
            <span class="text-teal-200">{"{"}</span>
            {
              metaFields.map((field) => (
                <div class="flex gap-[1ch] pl-[2ch]">
                  <dt class="text-slate-500">
                    <span class="text-blue-300">{field}</span>=
                  </dt>
                  <dd>
                    {" "}
                    <span class="text-amber-400 whitespace-nowrap">
                      "{speaker.data[field]}"
                    </span>
                  </dd>
                </div>
              ))
            }
            <span class="text-teal-200">{"}"}</span>
          </dl>
        </div>
      </div>
    </div>

    <footer class="vise my-16">
      <h2 class="text-2xl md:text-3xl font-mono font-bold text-amber-500 dark:text-amber-300 mb-4 md:mb-8">
        Additional Speakers
      </h2>

      <SpeakerGrid of={additionalSpeakers} />
    </footer>
  </article>
</App>
