<script>
  const convertToLocal = (datetime: number) => {
    const tzOptions = Intl.DateTimeFormat().resolvedOptions();
    return new Intl.DateTimeFormat("en-US", {
      timeZone: tzOptions.timeZone,
      hour: "numeric",
      hourCycle: "h24",
      minute: "numeric",
      timeZoneName: "short",
    }).format(datetime);
  };

  customElements.define(
    "local-time",
    class extends HTMLElement {
      constructor() {
        super();
      }
      connectedCallback() {
        const datetime = Date.parse(this.getAttribute("datetime")!);
        const local = convertToLocal(datetime);
        const [time, timeZone] = local.split(" ");
        this.innerHTML = `${time} <span>${timeZone}</span>`;
      }
    },
  );

  customElements.define(
    "local-timezone",
    class extends HTMLElement {
      constructor() {
        super();
      }
      connectedCallback() {
        const local = convertToLocal(Date.now());
        const tzOptions = Intl.DateTimeFormat().resolvedOptions();
        const [, timeZone] = local.split(" ");
        this.innerHTML = `${tzOptions.timeZone} (${timeZone})`
      }
    },
  );
</script>
